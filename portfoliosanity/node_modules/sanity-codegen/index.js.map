{"version":3,"file":"index.js","sources":["../src/client/create-client.ts"],"sourcesContent":["import { SanityReference, SanityKeyedReference } from '../types';\n\ninterface CreateClientOptions {\n  projectId: string;\n  dataset: string;\n  fetch: WindowOrWorkerGlobalScope['fetch'];\n  token?: string;\n  previewMode?: boolean;\n  useCdn?: boolean;\n  apiVersion?: string;\n}\n\ninterface SanityResult<T> {\n  ms: number;\n  query: string;\n  result: T[];\n}\n\nfunction createClient<Documents extends { _type: string; _id: string }>({\n  dataset,\n  projectId,\n  token,\n  previewMode: _previewMode = false,\n  apiVersion = '1',\n  fetch,\n  useCdn,\n}: CreateClientOptions) {\n  const normalizedApiVersion = normalizeApiVersion(apiVersion);\n  const previewModeRef = { current: _previewMode };\n\n  function normalizeApiVersion(version: string): string {\n    const [firstChar] = version;\n    if (firstChar === \"v\") {\n      return version.slice(1);\n    }\n\n    return version;\n  }\n\n  async function jsonFetch<T>(url: RequestInfo, options?: RequestInit) {\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        Accept: 'application/json',\n        ...options?.headers,\n      },\n    });\n    return (await response.json()) as T;\n  }\n\n  /**\n   * Given a type string and a document ID, this function returns a typed\n   * version of that document.\n   *\n   * If previewMode is true and a token is provided, then the client will prefer\n   * drafts over the published version.\n   */\n  async function get<T extends Documents['_type']>(\n    // NOTE: type is exclusively for typescript, it's not actually used in code\n    _type: T,\n    id: string\n  ) {\n    type R = Documents & { _type: T };\n\n    const preview = previewModeRef.current && !!token;\n    const previewClause = preview\n      ? // sanity creates a new document with an _id prefix of `drafts.`\n      // for when a document is edited without being published\n      `|| _id==\"drafts.${id}\"`\n      : '';\n\n    const [result] = await query<R>(`* [_id == \"${id}\" ${previewClause}]`);\n    return result;\n  }\n\n  /**\n   * Gets all the documents of a particular type. In preview mode, if a document\n   * has a draft, that will be returned instead.\n   */\n  async function getAll<T extends Documents['_type']>(\n    type: T,\n    filterClause?: string\n  ) {\n    // force typescript to narrow the type using the intersection.\n    // TODO: might be a cleaner way to do this. this creates an ugly lookin type\n    type R = { _type: T } & Documents;\n\n    return await query<R>(\n      `* [_type == \"${type}\"${filterClause ? ` && ${filterClause}` : ''}]`\n    );\n  }\n\n  /**\n   * If a sanity document refers to another sanity document, then you can use this\n   * function to expand that document, preserving the type\n   */\n  async function expand<T extends Documents>(\n    ref: SanityReference<T> | SanityKeyedReference<T>\n  ) {\n    // this function is primarily for typescript\n    const response = await get<T['_type']>(null as any, ref._ref);\n    // since this is a ref, the response will be defined (unless weak reference)\n    return response!;\n  }\n\n  /**\n   * Passes a query along to sanity. If preview mode is active and a token is\n   * present, it will prefer drafts over the published versions.\n   */\n  async function query<T extends { _id: string } = any>(\n    query: string\n  ): Promise<T[]> {\n    const searchParams = new URLSearchParams();\n    const preview = previewModeRef.current && !!token;\n\n    searchParams.set('query', query);\n    const response = await jsonFetch<SanityResult<T>>(\n      `https://${projectId}.${\n        useCdn ? 'apicdn' : 'api'\n      }.sanity.io/v${normalizedApiVersion}/data/query/${dataset}?${searchParams.toString()}`,\n      {\n        // conditionally add the authorization header if the token is present\n        ...(token &&\n          !useCdn && { headers: { Authorization: `Bearer ${token}` } }),\n      }\n    );\n\n    const prefix = 'drafts.';\n\n    if (!preview) {\n      return response.result.filter((doc) => !doc._id.startsWith(prefix));\n    }\n\n    const removeDraftPrefix = (_id: string) =>\n      _id.startsWith(prefix) ? _id.substring(prefix.length) : _id;\n\n    // create a lookup of only draft docs\n    const draftDocs = response.result\n      .filter((doc) => doc._id.startsWith('drafts.'))\n      .reduce<{ [_id: string]: T }>((acc, next) => {\n        acc[removeDraftPrefix(next._id)] = next;\n        return acc;\n      }, {});\n\n    // in this dictionary, if there is draft doc, that will be preferred,\n    // otherwise it'll use the published version\n    const finalAcc = response.result.reduce<{ [_id: string]: T }>(\n      (acc, next) => {\n        const id = removeDraftPrefix(next._id);\n        acc[id] = draftDocs[id] || next;\n        return acc;\n      },\n      {}\n    );\n\n    return Object.values(finalAcc);\n  }\n\n  /**\n   * Flip whether or not this client is using preview mode or not. Useful for\n   * preview mode within next.js.\n   */\n  function setPreviewMode(previewMode: boolean) {\n    previewModeRef.current = previewMode;\n  }\n\n  return { get, getAll, expand, query, setPreviewMode };\n}\n\nexport default createClient;\n"],"names":["createClient","dataset","projectId","token","previewMode","_previewMode","apiVersion","fetch","useCdn","normalizedApiVersion","normalizeApiVersion","previewModeRef","current","version","firstChar","slice","jsonFetch","url","options","headers","Accept","response","json","get","_type","id","preview","previewClause","query","result","getAll","type","filterClause","expand","ref","_ref","searchParams","URLSearchParams","set","toString","Authorization","prefix","filter","doc","_id","startsWith","removeDraftPrefix","substring","length","draftDocs","reduce","acc","next","finalAcc","Object","values","setPreviewMode"],"mappings":"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"}